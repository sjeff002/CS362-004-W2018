        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/***************************************************************************
        -:    2:*Author: Shannon Jeffers
        -:    3:*Class: CS362
        -:    4:*Assignment 3
        -:    5:*File: cardtest3
        -:    6:***************************************************************************/
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include "rngs.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <stdlib.h>
        -:   13:
        -:   14:int totalTests = 10;
        -:   15:int testsPassed = 0;
        -:   16:
function myAssert called 10 returned 100% blocks executed 100%
       10:   17:void myAssert(int truth, char *test){
       10:   18:    if (truth){
branch  0 taken 8 (fallthrough)
branch  1 taken 2
        8:   19:        printf("TEST: %s Completed Successfully\n", test);
call    0 returned 8
        8:   20:        testsPassed++;
        -:   21:    }
        -:   22:    else{
        2:   23:        printf("TEST: %s Failed!!\n", test);
call    0 returned 2
        -:   24:    }
       10:   25:}
        -:   26:
        -:   27:
function main called 1 returned 100% blocks executed 92%
        1:   28:int main() {
        1:   29:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   30:	int seed = 1000;
        1:   31:	int numPlayers = 2;
        1:   32:	int player =0, player2;
        -:   33:	struct gameState preState, testState;
        1:   34:	int k[10] = { adventurer, embargo, village, minion, mine, cutpurse,
        -:   35:		sea_hag, tribute, smithy, council_room };
        -:   36:
        1:   37:	initializeGame(numPlayers, k, seed, &preState);
call    0 returned 1
        -:   38:
        1:   39:	printf("\n----------------------TESTING CARD village----------------------\n");
call    0 returned 1
        -:   40:
        1:   41:	preState.hand[player][0] = village;
        1:   42:	memcpy(&testState, &preState, sizeof(struct gameState));
        -:   43:
        1:   44:	cardEffect(village, choice1, choice2, choice3, &testState, handpos, &bonus);
call    0 returned 1
        1:   45:	player = whoseTurn(&testState);
call    0 returned 1
        -:   46:
        -:   47:	//Should gain 1 cards, but lose 1 when village is discarded for a gain of 0.
        1:   48:	myAssert(preState.handCount[player] == testState.handCount[player], "Net gain of +0 cards");
call    0 returned 1
        -:   49:
        -:   50:	//insures cards come from the players hand
        1:   51:	myAssert(preState.deckCount[player] - 1 == testState.deckCount[player], "Cards came from players hand");
call    0 returned 1
        -:   52:
        -:   53:	//actions should increase by 2 because subtracting the current action is done by a different function
        1:   54:	myAssert(preState.numActions + 2 == testState.numActions, "Actions increase by 2");
call    0 returned 1
        -:   55:
        -:   56:	// insure a card was played/discarded
        1:   57:	myAssert(preState.playedCardCount + 1 == testState.playedCardCount, "village was discarded");
call    0 returned 1
        -:   58:
        -:   59:	//insure the smithy card was played
        1:   60:	myAssert(testState.playedCards[testState.playedCardCount - 1] == village, "village card was played");
call    0 returned 1
        -:   61:
        -:   62:	//ensure provice VC hasn't changed
        1:   63:	myAssert(preState.supplyCount[province] == testState.supplyCount[province], "No change in province cards");
call    0 returned 1
        -:   64:
        -:   65:	//ensure duchy VC hasn't change
        1:   66:	myAssert(preState.supplyCount[duchy] == testState.supplyCount[duchy], "No change in duchy cards");
call    0 returned 1
        -:   67:
        -:   68:	//ensure estate VC hasn't changed
        1:   69:	myAssert(preState.supplyCount[estate] == testState.supplyCount[estate], "No change in estate cards");
call    0 returned 1
        -:   70:
        -:   71:	//ensure it is still the current players turn
        1:   72:	myAssert(whoseTurn(&testState) == whoseTurn(&preState), "Turn has not changed");
call    0 returned 1
call    1 returned 1
call    2 returned 1
        -:   73:
        1:   74:	if (player) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   75:		player2 = 0;
        -:   76:	}
        -:   77:	else {
        1:   78:		player2 = 1;
        -:   79:	}
        -:   80:
        -:   81:	//make sure there is no change to the other player hand
        1:   82:	myAssert(preState.handCount[player2] == testState.handCount[player2], "Other players hand count is the same");
call    0 returned 1
        -:   83:
        1:   84:	if (totalTests == testsPassed) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   85:		printf("\n----------------------ALL TESTS PASSED----------------------\n");
call    0 never executed
        -:   86:	}
        -:   87:	else {
        1:   88:		printf("\n----------------------%d of %d TESTS PASSED----------------------\n", testsPassed, totalTests);
call    0 returned 1
        -:   89:	}
        1:   90:	return 0;
        -:   91:}
