        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/***************************************************************
        -:    2:*Author: Shannon Jeffers
        -:    3:*Class: CS362
        -:    4:*Assignment 3
        -:    5:*File: cardtest2.c
        -:    6:****************************************************************/
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include "rngs.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <stdlib.h>
        -:   13:
        -:   14:int totalTests = 9;
        -:   15:int testsPassed = 0;
        -:   16:
function myAssert called 9 returned 100% blocks executed 100%
        9:   17:void myAssert(int truth, char *test){
        9:   18:    if (truth){
branch  0 taken 7 (fallthrough)
branch  1 taken 2
        7:   19:        printf("TEST: %s Completed Successfully\n", test);
call    0 returned 7
        7:   20:        testsPassed++;
        -:   21:    }
        -:   22:    else{
        2:   23:        printf("TEST: %s Failed!!\n", test);
call    0 returned 2
        -:   24:    }
        9:   25:}
        -:   26:
        -:   27:
function main called 1 returned 100% blocks executed 91%
        1:   28:int main(){
        1:   29:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   30:    int seed = 1000;
        1:   31:    int numPlayers = 2;
        1:   32:    int player = 0, player2;
        -:   33:    struct gameState preState, testState;
        1:   34:    int k[10] = {adventurer, embargo, village, minion, mine, cutpurse, 
        -:   35:        sea_hag, tribute, smithy, council_room};
        -:   36:    
        1:   37:    initializeGame(numPlayers, k, seed, &preState);
call    0 returned 1
        -:   38:    
        1:   39:    printf("\n----------------------TESTING CARD smithy----------------------\n");
call    0 returned 1
        -:   40:    
        1:   41:    preState.hand[player][0] = smithy;
        1:   42:    memcpy(&testState, &preState, sizeof(struct gameState));
        -:   43:    
        -:   44:    
        1:   45:    cardEffect(smithy, choice1, choice2, choice3, &testState, handpos, &bonus);
call    0 returned 1
        1:   46:	player = whoseTurn(&testState);
call    0 returned 1
        -:   47:    
        -:   48:    //Should gain 3 cards, but lose 1 when smithy is discarded for a gain of 2.
        1:   49:    myAssert(preState.handCount[player] +2 == testState.handCount[player], "Net gain of +2 cards");
call    0 returned 1
        -:   50:    
        -:   51:    //insures cards come from the players hand
        1:   52:    myAssert(preState.deckCount[player] -3 ==  testState.deckCount[player], "Cards came from players hand");
call    0 returned 1
        -:   53:    
        -:   54:    // insure a card was played/discarded
        1:   55:    myAssert(preState.playedCardCount +1 == testState.playedCardCount, "smithy was discarded");
call    0 returned 1
        -:   56:
        -:   57:	//insure the smithy card was played
        1:   58:	myAssert(testState.playedCards[testState.playedCardCount - 1] == smithy, "council_room card was played");
call    0 returned 1
        -:   59:    
        -:   60:    //ensure provice VC hasn't changed
        1:   61:    myAssert(preState.supplyCount[province] == testState.supplyCount[province], "No change in province cards");
call    0 returned 1
        -:   62:    
        -:   63:    //ensure duchy VC hasn't change
        1:   64:    myAssert(preState.supplyCount[duchy] == testState.supplyCount[duchy], "No change in duchy cards");
call    0 returned 1
        -:   65:    
        -:   66:    //ensure estate VC hasn't changed
        1:   67:    myAssert(preState.supplyCount[estate] == testState.supplyCount[estate], "No change in estate cards");
call    0 returned 1
        -:   68:    
        -:   69:    //ensure it is still the current players turn
        1:   70:    myAssert(whoseTurn(&testState) == whoseTurn(&preState), "Turn has not changed");
call    0 returned 1
call    1 returned 1
call    2 returned 1
        -:   71:    
        1:   72:    if(player){
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   73:        player2 = 0;
        -:   74:    }
        -:   75:    else{
        1:   76:        player2 = 1;
        -:   77:    }
        -:   78:    
        -:   79:    //make sure there is no change to the other player hand
        1:   80:    myAssert(preState.handCount[player2] == testState.handCount[player2], "Other players hand count is the same");
call    0 returned 1
        -:   81:    
        1:   82:    if(totalTests == testsPassed){
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   83:        printf("\n----------------------ALL TESTS PASSED----------------------\n");
call    0 never executed
        -:   84:    }
        -:   85:    else{
        1:   86:        printf("\n----------------------%d of %d TESTS PASSED----------------------\n", testsPassed, totalTests);
call    0 returned 1
        -:   87:    }
        1:   88:	return 0;
        -:   89:}
