        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/************************************************
        -:    2:* Author: Shannon Jeffers
        -:    3:* Class: CS362
        -:    4:* Assignment 3
        -:    5:* File: cardtest1.c
        -:    6:************************************************/
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include "rngs.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <stdlib.h>
        -:   13:
        -:   14:int totalTests = 6;
        -:   15:int passedTests = 0;
        -:   16:
function myAssert called 6 returned 100% blocks executed 100%
        6:   17:void myAssert(int truth, char *test){
        6:   18:	if (truth) {
branch  0 taken 4 (fallthrough)
branch  1 taken 2
        4:   19:		printf("TEST: %s Completed Successfully.\n", test);
call    0 returned 4
        4:   20:		passedTests++;
        -:   21:	}
        -:   22:	else
        2:   23:		printf("TEST: %s Failed.\n", test);
call    0 returned 2
        6:   24:}
        -:   25:
        -:   26:
function main called 1 returned 100% blocks executed 93%
        1:   27:int main(){
        -:   28:
        -:   29:	int i;
        1:   30:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   31:	int seed = 1000;
        1:   32:	int numPlayers = 2;
        1:   33:	int player = 0;
        1:   34:	int player2 = 1;
        -:   35:	struct gameState preState, testState;
        1:   36:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   37:		sea_hag, tribute, smithy, council_room};
        -:   38:
        -:   39:	//set up the game
        1:   40:	initializeGame(numPlayers, k, seed, &preState);
call    0 returned 1
        -:   41:
        1:   42:	printf("\n-------------------TESTING Card: adventurer-------------------\n");
call    0 returned 1
        -:   43:
        -:   44:	//make a copy of game state
        1:   45:	memcpy(&testState, &preState, sizeof(struct gameState));
        -:   46:
        -:   47:	//play the card
        1:   48:	cardEffect(adventurer, choice1, choice2, choice3, &testState, handpos, &bonus);
call    0 returned 1
        -:   49:
        1:   50:	player = whoseTurn(&testState);
call    0 returned 1
        -:   51:	//counters to keep track of treasure in players hand
        1:   52:	int testTreasure = 0, origTreasure = 0;
        -:   53:
        -:   54:	//Make sure cards came from the players deck
        1:   55:	myAssert(testState.deckCount[player] < preState.deckCount[player], "Cards came from players deck");
call    0 returned 1
        -:   56:
        -:   57:	//make sure 2 cards were drawn. Should increase by 1 due to discard.
        1:   58:	myAssert(testState.handCount[player]-1 == preState.handCount[player], "Hand count increased by 1");
call    0 returned 1
        -:   59:
        -:   60:	//count up the treasure in both hands
        8:   61:	for(i=0; i < testState.handCount[player]; i++){
branch  0 taken 7
branch  1 taken 1 (fallthrough)
        -:   62:		if(testState.hand[player][i] == copper || silver || gold){
        7:   63:			testTreasure++;
        -:   64:		}
        -:   65:	}
        6:   66:	for(i=0; i < preState.handCount[player]; i++){
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        -:   67:		if(preState.hand[player][i] == copper || silver || gold){
        5:   68:			origTreasure++;
        -:   69:		}
        -:   70:	}
        -:   71:
        -:   72:	//trasure should have increased by 2
        1:   73:	myAssert(testTreasure == origTreasure +2, "Treasure count increased by 2");
call    0 returned 1
        -:   74:
        1:   75:	if(!whoseTurn(&testState))
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   76:		player2 = 1;
        -:   77:	else
    #####:   78:		player2 = 0;
        -:   79:
        -:   80:	//ensures only one players hand is effected
        1:   81:	myAssert(preState.handCount[player2] == testState.handCount[player2], "Second player hand did not change.");
call    0 returned 1
        -:   82:
        -:   83:	//checks it is still the same players turn
        1:   84:	myAssert(whoseTurn(&preState) == whoseTurn(&testState), "Turn did not change");
call    0 returned 1
call    1 returned 1
call    2 returned 1
        -:   85:
        -:   86:	//checks played card count increases by one
        1:   87:	myAssert(testState.playedCardCount == preState.playedCardCount + 1, "Played cards increased by 1");
call    0 returned 1
        -:   88:
        1:   89:	if (passedTests == 6)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   90:		printf("\n-------------------ALL TESTS PASS-------------------\n");
call    0 never executed
        -:   91:	
        -:   92:	else
        1:   93:		printf("\n-------------------%d of %d TESTS PASSED-------------------\n", passedTests, totalTests);
call    0 returned 1
        1:   94:	return 0;
        -:   95:}
