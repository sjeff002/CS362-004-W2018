        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int totalTests = 11;
        -:    9:int testsPassed = 0;
        -:   10:
function myAssert called 11 returned 100% blocks executed 80%
       11:   11:void myAssert(int truth, char *test){
       11:   12:    if (truth){
branch  0 taken 11 (fallthrough)
branch  1 taken 0
       11:   13:        printf("TEST: %s Completed Successfully\n", test);
call    0 returned 11
       11:   14:        testsPassed++;
        -:   15:    }
        -:   16:    else{
    #####:   17:        printf("TEST: %s Failed!!\n", test);
call    0 never executed
        -:   18:    }
       11:   19:}
        -:   20:
        -:   21:
function main called 1 returned 100% blocks executed 92%
        1:   22:int main(){
        1:   23:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   24:    int seed = 1000;
        1:   25:    int numPlayers = 2;
        1:   26:    int player =0, player2;
        -:   27:    struct gameState preState, testState;
        1:   28:    int k[10] = {adventurer, embargo, village, minion, mine, cutpurse, 
        -:   29:        sea_hag, tribute, smithy, council_room};
        -:   30:    
        1:   31:    initializeGame(numPlayers, k, seed, &preState);
call    0 returned 1
        -:   32:    
        1:   33:    printf("\n----------------------TESTING CARD council_room----------------------\n");
call    0 returned 1
        -:   34:    
        1:   35:    preState.hand[player][0] = council_room;
        1:   36:    memcpy(&testState, &preState, sizeof(struct gameState));
        -:   37:    
        -:   38:    
        1:   39:    cardEffect(council_room, choice1, choice2, choice3, &testState, handpos, &bonus);
call    0 returned 1
        1:   40:	player = whoseTurn(&testState);
call    0 returned 1
        -:   41:    
        -:   42:    //Should gain 4 cards, but lose 1 when smithy is discarded for a gain of 3.
        1:   43:    myAssert(preState.handCount[player] +3 == testState.handCount[player], "Net gain of +3 cards");
call    0 returned 1
        -:   44:    
        -:   45:    //insures cards come from the players hand
        1:   46:    myAssert(preState.deckCount[player] -4 == testState.deckCount[player], "Cards came from players hand");
call    0 returned 1
        -:   47:    
        -:   48:    // insure a card was played/discarded
        1:   49:    myAssert(preState.playedCardCount +1 == testState.playedCardCount, "council_room was discarded");
call    0 returned 1
        -:   50:    
        -:   51:    //insure the council_room card was played
        1:   52:    myAssert(testState.playedCards[testState.playedCardCount -1] == council_room, "council_room card was played");
call    0 returned 1
        -:   53:    
        -:   54:    //ensure provice VC hasn't changed
        1:   55:    myAssert(preState.supplyCount[province] == testState.supplyCount[province], "No change in province cards");
call    0 returned 1
        -:   56:    
        -:   57:    //ensure the buys increases by 1
        1:   58:    myAssert(preState.numBuys +1 == testState.numBuys, "Buys increased by 1");
call    0 returned 1
        -:   59:    
        -:   60:    //ensure duchy VC hasn't change
        1:   61:    myAssert(preState.supplyCount[duchy] == testState.supplyCount[duchy], "No change in duchy cards");
call    0 returned 1
        -:   62:    
        -:   63:    //ensure estate VC hasn't changed
        1:   64:    myAssert(preState.supplyCount[estate] == testState.supplyCount[estate], "No change in estate cards");
call    0 returned 1
        -:   65:    
        -:   66:    //ensure it is still the current players turn
        1:   67:    myAssert(whoseTurn(&testState) == whoseTurn(&preState), "Turn has not changed");
call    0 returned 1
call    1 returned 1
call    2 returned 1
        -:   68:    
        1:   69:    if(player){
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   70:        player2 = 0;
        -:   71:    }
        -:   72:    else{
        1:   73:        player2 = 1;
        -:   74:    }
        -:   75:    
        -:   76:    //make sure the other players hand increases by 1
        1:   77:    myAssert(preState.handCount[player2] +1 == testState.handCount[player2], "Other players hand count increases by 1");
call    0 returned 1
        -:   78:    
        -:   79:    //insures card came from the other players hand
        1:   80:    myAssert(preState.deckCount[player2] -1 == testState.deckCount[player2], "Card came from other players hand");
call    0 returned 1
        -:   81:    
        1:   82:    if(totalTests == testsPassed){
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   83:        printf("\n----------------------ALL TESTS PASSED----------------------\n");
call    0 returned 1
        -:   84:    }
        -:   85:    else{
    #####:   86:        printf("\n----------------------%d of %d TESTS PASSED----------------------\n", testsPassed, totalTests);
call    0 never executed
        -:   87:    }
        -:   88:
        1:   89:	return 0;
        -:   90:}
