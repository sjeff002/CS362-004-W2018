        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int totalTests = 3;
        -:    9:int testsPassed = 0;
        -:   10:
function myAssert called 3 returned 100% blocks executed 80%
        3:   11:void myAssert(int truth, char *test){
        3:   12:    if (truth){
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:   13:        printf("TEST: %s Completed Successfully\n", test);
call    0 returned 3
        3:   14:        testsPassed++;
        -:   15:    }
        -:   16:    else{
    #####:   17:        printf("TEST: %s Failed!!\n", test);
call    0 never executed
        -:   18:    }
        3:   19:}
        -:   20:
        -:   21:
        -:   22:
        -:   23:
function main called 1 returned 100% blocks executed 92%
        1:   24:int main(){
        -:   25:    int over;
        1:   26:    int seed = 1000;
        1:   27:    int numPlayers = 2;
        -:   28:    struct gameState state, test;
        1:   29:    int k[10] = {adventurer, embargo, village, minion, mine, cutpurse, 
        -:   30:        sea_hag, tribute, smithy, council_room};
        -:   31:    
        1:   32:    initializeGame(numPlayers, k, seed, &state);
call    0 returned 1
        -:   33:    
        1:   34:    printf("\n-------------------TESTING isGameOver-------------------\n");
call    0 returned 1
        -:   35:
        1:   36:    memcpy(&test, &state, sizeof(struct gameState));
        -:   37:
        1:   38:    over = isGameOver(&test);
call    0 returned 1
        -:   39:    //game is not over. Province and supply piles are full
        1:   40:    myAssert(over == 0, "The game is not over");
call    0 returned 1
        -:   41:
        1:   42:    test.supplyCount[province] = 0;
        -:   43:
        1:   44:    over = isGameOver(&test);
call    0 returned 1
        -:   45:    //ensures the game ends when province is empty
        1:   46:    myAssert(over == 1, "Province pile empty, game is over");
call    0 returned 1
        -:   47:
        -:   48:    //reset piles
        1:   49:    memcpy(&state, &test, sizeof(struct gameState));
        -:   50:
        1:   51:    test.supplyCount[gold] = 0;
        1:   52:    test.supplyCount[duchy] = 0;
        1:   53:    test.supplyCount[silver] = 0;
        1:   54:    over = isGameOver(&test);
call    0 returned 1
        -:   55:    //ensures game ends when 3 supply piles are empty.
        1:   56:    myAssert(over = 1, "3 supply piles are empty, game is over");
call    0 returned 1
        -:   57:
        1:   58:    if(totalTests == testsPassed){
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   59:        printf("\n----------------------ALL TESTS PASSED----------------------\n");
call    0 returned 1
        -:   60:    }
        -:   61:    else{
    #####:   62:        printf("\n----------------------%d of %d TESTS PASSED----------------------\n", testsPassed, totalTests);
call    0 never executed
        -:   63:    }
        1:   64:	return 0;
        -:   65:}
