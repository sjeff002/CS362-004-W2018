        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int totalTests = 6;
        -:    9:int testsPassed = 0;
        -:   10:
function myAssert called 6 returned 100% blocks executed 80%
        6:   11:void myAssert(int truth, char *test){
        6:   12:    if (truth){
branch  0 taken 6 (fallthrough)
branch  1 taken 0
        6:   13:        printf("TEST: %s Completed Successfully\n", test);
call    0 returned 6
        6:   14:        testsPassed++;
        -:   15:    }
        -:   16:    else{
    #####:   17:        printf("TEST: %s Failed!!\n", test);
call    0 never executed
        -:   18:    }
        6:   19:}
        -:   20:
        -:   21:
        -:   22:
        -:   23:
function main called 1 returned 100% blocks executed 97%
        1:   24:int main(){
        -:   25:	int i;
        1:   26:    int bonus = 12;
        1:   27:    int seed = 1000;
        1:   28:    int numPlayers = 2;
        1:   29:    int player =0;
        -:   30:    struct gameState state, test;
        1:   31:    int k[10] = {adventurer, embargo, village, minion, mine, cutpurse, 
        -:   32:        sea_hag, tribute, smithy, council_room};
        -:   33:    
        1:   34:    initializeGame(numPlayers, k, seed, &state);
call    0 returned 1
        -:   35:    
        1:   36:    printf("\n-------------------TESTING updateCoins-------------------\n");
call    0 returned 1
        -:   37:
        1:   38:    memcpy(&test, &state, sizeof(struct gameState));
        -:   39:
        -:   40:
        -:   41:    //test with no treasure in hand.
        1:   42:	test.handCount[player] = 5;
        6:   43:    for(i=0; i < 5; i++){
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        5:   44:        test.hand[player][i] = smithy;
        -:   45:    }
        1:   46:	updateCoins(player, &test, 0);
call    0 returned 1
        1:   47:    myAssert(test.coins == 0, "There are no coins in hand");
call    0 returned 1
        -:   48:
        -:   49:    //revert to default memory
        1:   50:    memcpy(&test, &state, sizeof(struct gameState));
        -:   51:    //test with all copper
        1:   52:	test.handCount[player] = 5;
        6:   53:	for (i = 0; i < 5; i++) {
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        5:   54:        test.hand[player][i] = copper;
        -:   55:    }
        1:   56:    updateCoins(player, &test, 0);
call    0 returned 1
        1:   57:    myAssert(test.coins == 5, "There are 5 coins in hand");
call    0 returned 1
        -:   58:
        -:   59:    //revert to default memory
        1:   60:    memcpy(&test, &state, sizeof(struct gameState));
        -:   61:    //test with all silver
        1:   62:	test.handCount[player] = 5;
        6:   63:	for (i = 0; i < 5; i++) {
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        5:   64:        test.hand[player][i] = silver;
        -:   65:    }
        1:   66:    updateCoins(player, &test, 0);
call    0 returned 1
        1:   67:    myAssert(test.coins == 10, "There are 10 coins in hand");
call    0 returned 1
        -:   68:
        -:   69:    //revert to default memory
        1:   70:    memcpy(&test, &state, sizeof(struct gameState));
        -:   71:    //test with all gold
        1:   72:	test.handCount[player] = 5;
        6:   73:	for (i = 0; i < 5; i++) {
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        5:   74:        test.hand[player][i] = gold;
        -:   75:    }
        1:   76:    updateCoins(player, &test, 0);
call    0 returned 1
        1:   77:    myAssert(test.coins == 15, "There are 15 coins in hand");
call    0 returned 1
        -:   78:
        -:   79:    //revert to default memory
        1:   80:    memcpy(&test, &state, sizeof(struct gameState));
        -:   81:    //test with mixture
        1:   82:	test.handCount[player] = 5;
        1:   83:    test.hand[player][0] = copper;
        1:   84:    test.hand[player][1] = silver;
        1:   85:    test.hand[player][2] = gold;
        1:   86:    test.hand[player][3] = silver;
        1:   87:    test.hand[player][4] = copper;
        1:   88:	updateCoins(player, &test, 0);
call    0 returned 1
        1:   89:    myAssert(test.coins == 9, "There are 9 coins in hand");
call    0 returned 1
        -:   90:
        -:   91:    //revert to default memory
        1:   92:    memcpy(&test, &state, sizeof(struct gameState));
        -:   93:    //test with mixed coins and bonus
        1:   94:	test.handCount[player] = 5;
        1:   95:    test.hand[player][0] = copper;
        1:   96:    test.hand[player][1] = silver;
        1:   97:    test.hand[player][2] = gold;
        1:   98:    test.hand[player][3] = silver;
        1:   99:    test.hand[player][4] = copper;
        1:  100:	updateCoins(player, &test, bonus);
call    0 returned 1
        1:  101:    myAssert(test.coins == 21, "There are 9 coins and 12 bonus for a total of 21 coins");
call    0 returned 1
        -:  102:
        1:  103:    if(totalTests == testsPassed){
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  104:        printf("\n----------------------ALL TESTS PASSED----------------------\n");
call    0 returned 1
        -:  105:    }
        -:  106:    else{
    #####:  107:        printf("\n----------------------%d of %d TESTS PASSED----------------------\n", testsPassed, totalTests);
call    0 never executed
        -:  108:    }
        -:  109:
        1:  110:	return 0;
        -:  111:}
