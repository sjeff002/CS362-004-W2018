        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int totalTests = 6;
        -:    9:int testsPassed = 0;
        -:   10:
function myAssert called 6 returned 100% blocks executed 80%
        6:   11:void myAssert(int truth, char *test){
        6:   12:    if (truth){
branch  0 taken 6 (fallthrough)
branch  1 taken 0
        6:   13:        printf("TEST: %s Completed Successfully\n", test);
call    0 returned 6
        6:   14:        testsPassed++;
        -:   15:    }
        -:   16:    else{
    #####:   17:        printf("TEST: %s Failed!!\n", test);
call    0 never executed
        -:   18:    }
        6:   19:}
        -:   20:
        -:   21:
        -:   22:
        -:   23:
function main called 1 returned 100% blocks executed 94%
        1:   24:int main(){
        1:   25:    int seed = 1000;
        1:   26:    int numPlayers = 2;
        -:   27:    struct gameState test1, test2, test3, preTest4, test4;
        1:   28:    int k[10] = {adventurer, embargo, village, minion, mine, cutpurse, 
        -:   29:        sea_hag, tribute, smithy, council_room};
        -:   30:    
        1:   31:    initializeGame(numPlayers, k, seed, &test1);
call    0 returned 1
        -:   32:    
        1:   33:    printf("\n-------------------TESTING buyCard-------------------\n");
call    0 returned 1
        -:   34:
        1:   35:    memcpy(&test2, &test1, sizeof(struct gameState));
        -:   36:    
        1:   37:    memcpy(&test3, &test1, sizeof(struct gameState));
        -:   38:    
        1:   39:    memcpy(&preTest4, &test1, sizeof(struct gameState));
        -:   40:    
        1:   41:    memcpy(&test4, &test1, sizeof(struct gameState));
        -:   42:    
        1:   43:    test1.coins = 2;
        1:   44:    test2.coins = 3;
        1:   45:    test2.numBuys = 0;
        1:   46:    test3.supplyCount[village] = 0;
        1:   47:    test4.coins = 3;
        1:   48:    preTest4.coins = 3;
        -:   49:    int returns;
        -:   50:    
        -:   51:    //ensures buyCard doesnt allow purchase without proper coin amount.
        1:   52:    myAssert((returns = buyCard(village, &test1)) == -1, "Fails to buy a card if not enough coins");
call    0 returned 1
call    1 returned 1
        -:   53:    
        -:   54:    //ensures a player cannot buy a card if they have no buys
        1:   55:    myAssert((returns = buyCard(village, &test2)) == -1, "Fails to buy if no buys remaining");
call    0 returned 1
call    1 returned 1
        -:   56:    
        -:   57:    //ensures buyCard doesn't allow purchase of unavailible cards
        1:   58:    myAssert((returns = buyCard(village, &test3)) == -1, "Fails to buy if there are no more of the card");
call    0 returned 1
call    1 returned 1
        -:   59:    
        -:   60:    //if player has a buy, the card is in stock and they have the coins they can buy it
        1:   61:    myAssert((returns = buyCard(village, &test4)) == 0, "Buys card successfully");
call    0 returned 1
call    1 returned 1
        -:   62:    
        -:   63:    //assures the buy is removed from the player
        1:   64:    myAssert(test4.numBuys +1 == preTest4.numBuys, "The buy has been used");
call    0 returned 1
        -:   65:    
        -:   66:    //assures player doesn't keep their coins
        1:   67:    myAssert(test4.coins +3 == preTest4.coins, "The coins are removed from play");
call    0 returned 1
        -:   68:    
        1:   69:    if(totalTests == testsPassed){
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   70:        printf("\n----------------------ALL TESTS PASSED----------------------\n");
call    0 returned 1
        -:   71:    }
        -:   72:    else{
    #####:   73:        printf("\n----------------------%d of %d TESTS PASSED----------------------\n", testsPassed, totalTests);
call    0 never executed
        -:   74:    }
        -:   75:
        1:   76:	return 0;
        -:   77:
        -:   78:}
        -:   79:
